<Pipeline>

<description>
Align paired-end reads from two fastq files, remove all duplicates, perform local realignment around indels, and call SNP and indel variants using the GaTK.
</description>

<reference class="buffer.ReferenceFile" filename="$${Reference sequence}" />

<readsOne class="buffer.FastQFile" filename="$${First fastq file}" />
<readsTwo class="buffer.FastQFile" filename="$${Second fastq file}" />

<AlignReadsOne class="operator.bwa.BWAAligner" threads="12">
	<input>
		<reference />
		<readsOne />
	</input>
	<output >
		<readsOneSAI class="buffer.SAIFile" filename="$${prefix}.readsOne.sai" />
	</output>
</AlignReadsOne>

<AlignReadsTwo class="operator.bwa.BWAAligner" threads="12">
	<input>
		<reference />
		<readsTwo />
	</input>
	<output >
		<readsTwoSAI class="buffer.SAIFile" filename="$${prefix}.readsTwo.sai" />
	</output>
</AlignReadsTwo>

<CreateSAMFile class="operator.bwa.BWASampe" >
	<input>
		<reference />
		<readsOneSAI />
		<readsTwoSAI />
		<readsOne />
		<readsTwo />
	</input>
	<output>
		<readsSAM class="buffer.SAMFile" filename="$${prefix}.sam" />	
	</output>
</CreateSAMFile>

<ConvertSamToBam class="operator.samtools.ConvertSamBam">
	<input>
		<readsSAM />
	</input>
	<output>
		<readsBAM class="buffer.BAMFile" filename="$${prefix}.raw.bam" />
	</output>
</ConvertSamToBam>

<RemoveDuplicates class="operator.samtools.SamtoolsRemoveDuplicates" >
	<input>
		<readsBAM />
	</input>
	<output>
		<readsDeDupBAM class="buffer.BAMFile" filename="$${prefix}.dedup.bam" />
	</output>
</RemoveDuplicates>


<SortAndIndex class="operator.picard.CoordinateSort" createindex="true">
	<input>
		<readsDeDupBAM />
	</input>
	<output>
		<readsSorted class="buffer.BAMFile" filename="$${prefix}.dedup.sort.bam" />
	</output>
</SortAndIndex>
 
 <TargetCreator class="operator.gatk.TargetCreator" >
	<input>
		<reference />
		<readsSorted />
	</input>
	<output>
		<targetIntervals class="buffer.CSVFile" filename="realign_targets.intervals"/>
	</output>
</TargetCreator>

<LocalIndelRealign class="operator.gatk.IndelRealign" >
	<input>
		<reference />
		<readsSorted />
		<targetIntervals />
	</input>
	<output>
		<realignedBAM class="buffer.BAMFile" filename="$${prefix}.dedup.realigned.bam" />	
	</output>
</LocalIndelRealign>

<SortAgain class="operator.picard.CoordinateSort" createindex="true">
	<input>
		<realignedBAM />
	</input>
	<output>
		<realignedResorted class="buffer.BAMFile" filename="$${prefix}.dedup.realign.bam" />
	</output>
</SortAgain>


<CallVariants class="operator.gatk.Genotyper" >
	<input>
		<reference />
		<realignedResorted />
	</input>
	<output>
		<variants class="buffer.VCFFile" filename="$${prefix}.all.variants.vcf" />
	</output>
</CallVariants>

<PassFilter class="operator.RowFilter" filter="PASS">
   <input>
     <variants />
   </input>
   <output>
     <variantsFiltered class="buffer.VCFFile" filename="$${prefix}.highquality.variants.vcf" />
   </output>
 </PassFilter>
 
</Pipeline>